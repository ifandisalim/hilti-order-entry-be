type Schema {
    query: Query
}

type Query {
    employees: [Employee]
    employee(id: Int): Employee

    customerRepresentatives: [CustomerRepresentative]
    customerRepresentative(id: Int): CustomerRepresentative

    departments: [Department]
    department(id: Int): Department

    products: [Product]
    product(id: Int): Product

    categories: [ProductCategory]
    categoriesMaster: [ProductCategory]
    category(id: Int): ProductCategory

    orders: [Order]
    order(id: Int): Order

    customerRepOrderHistory(customerRepresentativeId: Int, offset: Int): [Order]
    employeeOrderHistory(employeeId: Int, offset: Int): [Order]


}

type Employee {
    id: Int
    firstName: String
    lastName: String
    department: Department
}

type Department {
    id: Int
    name: String
}

type CustomerRepresentative {
    id: Int
    firstName: String
    lastName: String
    customerClass: String
    creditLimit: Float
    creditUsed: Float
    company: Customer
    orderHistory: [Order]

}

type Customer {
    id: Int
    name: String
}

type Order {
    id: Int
    buyer: CustomerRepresentative
    handler: Employee
    items: [OrderItem]
    totalPrice: Float
    dateOrdered: String
    datePaid: String
    isPaid: Boolean
}


type OrderItem{
    id: Int
    product: Product
    order: Order
    quantity: Int
}

type Product {
    id: Int
    name: String
    description: String
    price: Float,
    category: ProductCategory,
    applications: [ProductApplication],
    features: [ProductFeature],
    content: [ProductContent]
}

type ProductCategory {
    id: Int,
    name: String,
    description: String,
    imageUrl: String,
    products: [Product],
    isMaster: Boolean
    parentCategory: ProductCategory,
    childCategories: [ProductCategory]
}

type ProductApplication {
    id: Int,
    description: String
}

type ProductFeature {
    id: Int,
    description: String
}

type ProductContent {
    id: Int,
    name: String,
    quantity: Int
}